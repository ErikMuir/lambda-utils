{"version":3,"sources":["../../../src/utilities/lambda-response/index.js"],"names":["LambdaResponse","constructor","_body","undefined","_isBase64Encoded","JSON","stringify","_statusCode","_headers","isBase64Encoded","newValue","statusCode","newStatusCode","body","newBody","headers","addHeader","header","isHeader","Header","TypeError","key","value","build","_getBody"],"mappings":";;;;;;;AAAA;;;;;;AAEe,MAAMA,cAAN,CAAqB;AAClCC,EAAAA,WAAW,GAAG;AAAA,sCAkCH,MAAM;AACf,UAAI,KAAKC,KAAL,KAAe,IAAf,IAAuB,KAAKA,KAAL,KAAeC,SAA1C,EAAqD;AACnD,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,KAAKC,gBAAT,EAA2B;AAChC,eAAO,KAAKF,KAAZ;AACD,OAFM,MAEA;AACL,eAAOG,IAAI,CAACC,SAAL,CAAe,KAAKJ,KAApB,CAAP;AACD;AACF,KA1Ca;;AACZ,SAAKE,gBAAL,GAAwB,KAAxB;AACA,SAAKG,WAAL,GAAmB,GAAnB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKN,KAAL,GAAa,IAAb;AACD;;AAED,MAAIO,eAAJ,GAAsB;AAAE,WAAO,KAAKL,gBAAZ;AAA+B;;AACvD,MAAIK,eAAJ,CAAoBC,QAApB,EAA8B;AAAE,SAAKN,gBAAL,GAAwB,CAAC,CAACM,QAA1B;AAAqC;;AAErE,MAAIC,UAAJ,GAAiB;AAAE,WAAO,KAAKJ,WAAZ;AAA0B;;AAC7C,MAAII,UAAJ,CAAeC,aAAf,EAA8B;AAAE,SAAKL,WAAL,GAAmBK,aAAnB;AAAmC;;AAEnE,MAAIC,IAAJ,GAAW;AAAE,WAAO,KAAKX,KAAZ;AAAoB;;AACjC,MAAIW,IAAJ,CAASC,OAAT,EAAkB;AAAE,SAAKZ,KAAL,GAAaY,OAAb;AAAuB;;AAE3C,MAAIC,OAAJ,GAAc;AAAE,WAAO,KAAKP,QAAZ;AAAuB;;AACvCQ,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,UAAMC,QAAQ,GAAGD,MAAM,YAAYE,eAAnC;;AACA,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACD;;AACD,SAAKZ,QAAL,CAAcS,MAAM,CAACI,GAArB,IAA4BJ,MAAM,CAACK,KAAnC;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,WAAO;AACLd,MAAAA,eAAe,EAAE,KAAKL,gBADjB;AAELO,MAAAA,UAAU,EAAE,KAAKJ,WAFZ;AAGLQ,MAAAA,OAAO,EAAE,KAAKP,QAHT;AAILK,MAAAA,IAAI,EAAE,KAAKW,QAAL;AAJD,KAAP;AAMD;;AAjCiC","sourcesContent":["import Header from '../header';\r\n\r\nexport default class LambdaResponse {\r\n  constructor() {\r\n    this._isBase64Encoded = false;\r\n    this._statusCode = 200;\r\n    this._headers = {};\r\n    this._body = null;\r\n  }\r\n\r\n  get isBase64Encoded() { return this._isBase64Encoded; }\r\n  set isBase64Encoded(newValue) { this._isBase64Encoded = !!newValue ;}\r\n\r\n  get statusCode() { return this._statusCode; }\r\n  set statusCode(newStatusCode) { this._statusCode = newStatusCode; }\r\n\r\n  get body() { return this._body; }\r\n  set body(newBody) { this._body = newBody; }\r\n\r\n  get headers() { return this._headers; }\r\n  addHeader(header) {\r\n    const isHeader = header instanceof Header;\r\n    if (!isHeader) {\r\n      throw new TypeError('header must be of type Header');\r\n    }\r\n    this._headers[header.key] = header.value;\r\n  }\r\n\r\n  build() {\r\n    return {\r\n      isBase64Encoded: this._isBase64Encoded,\r\n      statusCode: this._statusCode,\r\n      headers: this._headers,\r\n      body: this._getBody(),\r\n    };\r\n  }\r\n\r\n  _getBody = () => {\r\n    if (this._body === null || this._body === undefined) {\r\n      return null;\r\n    } else if (this._isBase64Encoded) {\r\n      return this._body;\r\n    } else {\r\n      return JSON.stringify(this._body);\r\n    }\r\n  }\r\n}\r\n"],"file":"index.js"}