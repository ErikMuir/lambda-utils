{"version":3,"sources":["../../src/utilities/LambdaLogger.js"],"names":["LambdaLogger","constructor","name","logType","data","LogLevel","LogEnv","logLevel","message","error","categorizedData","_categorize","lambdaContext","lambdaEvent","console","JSON","stringify","time","Date","toISOString","level","logger","trim","userId","executionName","awsRequestId","functionName","remainingTime","getRemainingTimeInMillis","exception","stack","k","v","undefined","forEach","d","Error","push","length","trace","_log","debug","info","warn"],"mappings":"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","sourcesContent":["import LogLevel from './LogLevel';\r\nimport LogEnv from './LogEnv';\r\n\r\nexport default class LambdaLogger {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  trace(...data) { this._log('trace', data); }\r\n  debug(...data) { this._log('debug', data); }\r\n  info(...data) { this._log('info', data); }\r\n  warn(...data) { this._log('warn', data); }\r\n  error(...data) { this._log('error', data); }\r\n\r\n  _log = (logType, data) => {\r\n    if (LogLevel[logType] < LogLevel[LogEnv.logLevel]) {\r\n      return;\r\n    }\r\n    \r\n    const { message, error, categorizedData } = this._categorize(data);\r\n    const { lambdaContext, lambdaEvent } = LogEnv;\r\n\r\n    console[logType](\r\n      JSON.stringify(\r\n        {\r\n          time: new Date().toISOString(),\r\n          level: logType,\r\n          logger: this.name,\r\n          message: message.trim(),\r\n          userId: lambdaEvent && lambdaEvent.userId,\r\n          executionName: lambdaEvent && lambdaEvent.executionName,\r\n          awsRequestId: lambdaContext && lambdaContext.awsRequestId,\r\n          functionName: lambdaContext && lambdaContext.functionName,\r\n          remainingTime:\r\n            lambdaContext && lambdaContext.getRemainingTimeInMillis && lambdaContext.getRemainingTimeInMillis(),\r\n          exception: error && error.stack,\r\n          data: categorizedData,\r\n        },\r\n        (k, v) => (!v ? undefined : v)\r\n      )\r\n    );\r\n  };\r\n\r\n  _categorize = data => {\r\n    let message = '',\r\n      error,\r\n      categorizedData = [];\r\n\r\n    data.forEach(d => {\r\n      switch (typeof d) {\r\n        case 'number':\r\n        case 'string':\r\n        case 'boolean':\r\n          message += `${d} `;\r\n          break;\r\n        default:\r\n          if (d instanceof Error) {\r\n            error = d;\r\n          } else {\r\n            categorizedData.push(d);\r\n          }\r\n      }\r\n    });\r\n\r\n    if (categorizedData.length === 0) {\r\n      categorizedData = undefined;\r\n    } else if (categorizedData.length === 1) {\r\n      categorizedData = categorizedData[0];\r\n    }\r\n\r\n    return { message, error, categorizedData };\r\n  };\r\n}\r\n"],"file":"LambdaLogger.js"}