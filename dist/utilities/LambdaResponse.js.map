{"version":3,"sources":["../../src/utilities/LambdaResponse.js"],"names":["LambdaResponse","constructor","_body","undefined","_isBase64Encoded","JSON","stringify","_statusCode","_headers","PrimitiveMap","isBase64Encoded","newValue","statusCode","newStatusCode","body","newBody","headers","addHeader","header","isHeader","Header","TypeError","set","build","toObject","_getBody"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,cAAN,CAAqB;AAClCC,EAAAA,WAAW,GAAG;AAAA,sCAkCH,MAAM;AACf,UAAI,KAAKC,KAAL,KAAe,IAAf,IAAuB,KAAKA,KAAL,KAAeC,SAA1C,EAAqD;AACnD,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,KAAKC,gBAAT,EAA2B;AAChC,eAAO,KAAKF,KAAZ;AACD,OAFM,MAEA;AACL,eAAOG,IAAI,CAACC,SAAL,CAAe,KAAKJ,KAApB,CAAP;AACD;AACF,KA1Ca;;AACZ,SAAKE,gBAAL,GAAwB,KAAxB;AACA,SAAKG,WAAL,GAAmB,GAAnB;AACA,SAAKC,QAAL,GAAgB,IAAIC,uBAAJ,EAAhB;AACA,SAAKP,KAAL,GAAa,IAAb;AACD;;AAED,MAAIQ,eAAJ,GAAsB;AAAE,WAAO,KAAKN,gBAAZ;AAA+B;;AACvD,MAAIM,eAAJ,CAAoBC,QAApB,EAA8B;AAAE,SAAKP,gBAAL,GAAwB,CAAC,CAACO,QAA1B;AAAqC;;AAErE,MAAIC,UAAJ,GAAiB;AAAE,WAAO,KAAKL,WAAZ;AAA0B;;AAC7C,MAAIK,UAAJ,CAAeC,aAAf,EAA8B;AAAE,SAAKN,WAAL,GAAmBM,aAAnB;AAAmC;;AAEnE,MAAIC,IAAJ,GAAW;AAAE,WAAO,KAAKZ,KAAZ;AAAoB;;AACjC,MAAIY,IAAJ,CAASC,OAAT,EAAkB;AAAE,SAAKb,KAAL,GAAaa,OAAb;AAAuB;;AAE3C,MAAIC,OAAJ,GAAc;AAAE,WAAO,KAAKR,QAAZ;AAAuB;;AACvCS,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,UAAMC,QAAQ,GAAGD,MAAM,YAAYE,iBAAnC;;AACA,QAAI,CAACD,QAAL,EAAe;AACb,YAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACD;;AACD,SAAKb,QAAL,CAAcc,GAAd,CAAkBJ,MAAlB;AACD;;AAEDK,EAAAA,KAAK,GAAG;AACN,WAAO;AACLb,MAAAA,eAAe,EAAE,KAAKN,gBADjB;AAELQ,MAAAA,UAAU,EAAE,KAAKL,WAFZ;AAGLS,MAAAA,OAAO,EAAE,KAAKR,QAAL,CAAcgB,QAAd,EAHJ;AAILV,MAAAA,IAAI,EAAE,KAAKW,QAAL;AAJD,KAAP;AAMD;;AAjCiC","sourcesContent":["import { Header, PrimitiveMap } from '@erikmuir/node-utils';\n\nexport default class LambdaResponse {\n  constructor() {\n    this._isBase64Encoded = false;\n    this._statusCode = 200;\n    this._headers = new PrimitiveMap();\n    this._body = null;\n  }\n\n  get isBase64Encoded() { return this._isBase64Encoded; }\n  set isBase64Encoded(newValue) { this._isBase64Encoded = !!newValue ;}\n\n  get statusCode() { return this._statusCode; }\n  set statusCode(newStatusCode) { this._statusCode = newStatusCode; }\n\n  get body() { return this._body; }\n  set body(newBody) { this._body = newBody; }\n\n  get headers() { return this._headers; }\n  addHeader(header) {\n    const isHeader = header instanceof Header;\n    if (!isHeader) {\n      throw new TypeError('header must be of type Header');\n    }\n    this._headers.set(header);\n  }\n\n  build() {\n    return {\n      isBase64Encoded: this._isBase64Encoded,\n      statusCode: this._statusCode,\n      headers: this._headers.toObject(),\n      body: this._getBody(),\n    };\n  }\n\n  _getBody = () => {\n    if (this._body === null || this._body === undefined) {\n      return null;\n    } else if (this._isBase64Encoded) {\n      return this._body;\n    } else {\n      return JSON.stringify(this._body);\n    }\n  }\n}\n"],"file":"LambdaResponse.js"}